# Docker Compose for Coolify - Official Documentation Pattern
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: biblia-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-bibliasoe}
      - POSTGRES_USER=${DB_USER:-soe}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    networks:
      - biblia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soe -d bibliasoe"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 45s
    labels:
      - coolify.managed=true

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.simple
    container_name: biblia-backend
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-soe}:${DB_PASSWORD}@db:5432/${DB_NAME:-bibliasoe}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bibliasoe}
      - DB_USER=${DB_USER:-soe}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - db
    networks:
      - biblia-network
    labels:
      - coolify.managed=true
      - traefik.enable=true
      - traefik.http.routers.backend-api.rule=Host(`soe.texts.com.br`) && PathPrefix(`/api`)
      - traefik.http.routers.backend-api.entrypoints=https
      - traefik.http.services.backend-api.loadbalancer.server.port=8001

  # Nuxt 3 Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    container_name: biblia-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NITRO_PORT=3000
      - NITRO_HOST=0.0.0.0
      - NUXT_TELEMETRY_DISABLED=1
      - NUXT_PUBLIC_API_BASE=http://backend:8001/api/v1
    depends_on:
      - backend
    networks:
      - biblia-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 5
    labels:
      - coolify.managed=true

volumes:
  postgres_data:
    driver: local

networks:
  biblia-network:
    driver: bridge